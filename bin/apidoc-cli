#!/usr/bin/env ruby

# CLI to apidoc
#
# Usage:
#  apidoc-cli <command> <arguments>
#  PROFILE=gilt apidoc-cli <command> <arguments>
#
# Environment variables:
#    APIDOC_API_URI: The URI of the apidoc api. Defaults to http://api.apidoc.me
#    PROFILE: will default to the 'default' specified in your configuration file
#
# The arguments vary by the command
#
# apidoc-cli list organizations
#  - Returns a list of all of the organizations that you have access to
#  - Pagination is implemented with environment variables LIMIT and OFFSET. Example:
#    LIMIT=10 OFFSET=0 apidoc-cli list organizations
#
# apidoc-cli list applications gilt
#  - Returns a list of the applications for the organization gilt
#  - Pagination is implemented with environment variables LIMIT and OFFSET. Example:
#    LIMIT=10 OFFSET=0 apidoc-cli list applications gilt
#
# apidoc-cli code gilt apidoc latest scala_models
#  - Returns the code for gilt/apidoc version 'latest' using the
#    codegenerator 'scala_models'
#

load File.join(File.dirname(__FILE__), 'apidoc-cli-config')



env = {
  :profile => ApidocCli::Util.read_non_empty_string(ENV['PROFILE']),
  :limit => ApidocCli::Util.read_non_empty_integer(ENV['LIMIT']),
  :offset => ApidocCli::Util.read_non_empty_integer(ENV['OFFSET'])
}.select { |k, v| !v.nil? }

config = ApidocCli::Config.new
profile_config = config.profile(env[:profile] || config.default.profile)
auth = if profile_config && profile_config.token
         Com::Gilt::Apidoc::V0::HttpClient::Authorization.basic(profile_config.token)
       else
         nil
       end

client = Com::Gilt::Apidoc::V0::Client.new(ApidocCli::Constants::APIDOC_API_URI, :authorization => auth)

command = ARGV.shift.to_s.strip

if command == "list"
  resource = ARGV.shift.to_s.strip

  if resource == "organizations"
    client.organizations.get(:limit => env[:limit], :offset => env[:offset]).each do |org|
      puts org.key
    end

  elsif resource == "applications"
    org = ARGV.shift.to_s.strip

    if org == ""
      puts "organization is required"
      exit(1)
    else
      client.applications.get_by_org_key(org, :limit => env[:limit], :offset => env[:offset]).each do |app|
        puts app.key
      end
    end

  elsif resource == ""
    puts "resource to list is required"
    exit(1)

  else
    puts "unrecognized resource[#{resource}]"
    exit(1)
  end

elsif command == "code"
  org = ARGV.shift.to_s.strip
  application = ARGV.shift.to_s.strip
  version = ARGV.shift.to_s.strip
  generator = ARGV.shift.to_s.strip

  if org != "" && application != "" && version != "" && generator != ""
    code = client.code.get_by_org_key_and_application_key_and_version_and_generator_key(org, application, version, generator)
    puts code.source

  else
    puts "org, application, version, and generator are required"
    exit(1)
  end


elsif command == ""
  puts "command is required"
  exit(1)

else
  puts "unrecognized command[#{command}]"
  exit(1)
end
